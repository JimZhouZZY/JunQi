import subprocess
import traceback
import os

test_path = os.path.dirname(os.path.abspath(__file__))

str_true = "true\n"
str_false = "false\n"
tailing_state = "000000000000000000000000000000000000000000000000000000000000 r 0 0"

# TODO: isLegalPlayer

datas = [
    [tailing_state, "", str_false],
    [tailing_state, "0acc00acc00acc00ac0acc00acc0", str_false],
    [tailing_state, "caccbbdddee0e0fff0gghh0iijjkl", str_false],
    [tailing_state, "0acc00acc00acc00acc00acc00acc0", str_false],
    [tailing_state, "caccbbdddee0e0fff0ggh0h0iijjkl", str_true],
    [tailing_state, "baccbcdddee0e0fff0ggh0h0iijjkl", str_true],
    [tailing_state, "baccbedddec0e0fff0ggh0h0iijjkl", str_false],
    [tailing_state, "haccbcdddee0e0fff0ggb0h0iijjkl", str_true],
    [tailing_state, "haccbcdddee0e0fff0ggi0h0ibjjkl", str_false],
    [tailing_state, "fcadhgfijcj0e0ddk0cif0h0lbegeb", str_false], # generated by 'random_layout'
    [tailing_state, "jegbhdedbia0j0lif0fkc0f0dcecgh", str_false],
    [tailing_state, "biibdcdggef0j0fec0cfh0h0keajdl", str_false],
    [tailing_state, "ehdjcfbiccf0f0bla0ehe0i0djgdkg", str_false],
    [tailing_state, "hfejegekjbd0h0dbl0cca0d0iicfgf", str_false],
    [tailing_state, "FCDDFE0C0JIE0AGH0L0FBIBCDKEHJG", str_false], # generated by 'random_layout b'
    [tailing_state, "CKCLDF0J0FHB0DEI0H0BGGEJAEIDFC", str_false],
    [tailing_state, "IEEHAI0K0DLE0HGB0G0CDJJFDCCBFF", str_false],
    [tailing_state, "DCCDGL0F0HBJ0CEJ0E0IABIKFHEGFD", str_false],
    [tailing_state, "CACCBBDDDEE0E0FFF0GGH0H0IIJJKL", str_false],
    [tailing_state, "caccfbikjlh0g0gfj0dif0e0eddhbe", str_false], # generated by 'random_layout exclusive'
    [tailing_state, "cacckjgdhef0f0lbb0ehf0g0ieijdd", str_true],
    [tailing_state, "caccglhkebe0f0idg0bjd0h0dijffe", str_true],
    [tailing_state, "caccikddbed0f0jjh0feh0l0fbgegi", str_false],
    [tailing_state, "cccafbhbedd0f0jhf0dle0i0gijegk", str_true],    
    [tailing_state, "LFDFGD0I0FJK0IEB0D0BHJEEGHCCAC", str_true], # generated by 'random_layout b exclusive'
    [tailing_state, "HFEFBD0D0JLJ0IDB0E0EHGFKIGCCAC", str_false],
    [tailing_state, "JDFLGK0G0HDI0FHF0J0BEEEBDIACCC", str_true],
    [tailing_state, "FKDGHD0B0EDE0LGH0F0BJEFIIJCCAC", str_true],
    [tailing_state, "JLGBFH0F0BKD0IDH0D0EJEEIFGCCAC", str_false],
    [tailing_state, "cccafbhbedd0f0jhf0dle0i0gijegkJDFLGK0G0HDI0FHF0J0BEEEBDIACCC", str_false],
    [tailing_state, "cccafbhbedd0f0jhf0dle0i0gijLGBFH0F0BKD0IDH0D0EJEEIFGCCAC", str_false],
    [tailing_state, "000000000000000000000000000000JLGBFH0F0BKD0IDH0D0EJEEIFGCCAC", str_false], # Maybe we can change the logic on this kind, just ignore 0 or #
    [tailing_state, "JLGBFH#F#BKD#IDH#D#EJEEIFGCCAC", str_false],
]

def test_isLegalLayout():
    idx = 0
    answers = []
    results = []
    for data in datas:
        state = data[0]
        layout = data[1]
        answer = data[2]
        result = subprocess.run(
            ['node', 'test_isLegalLayout.js', state, layout ],
            cwd=test_path,
            capture_output=True,
            text=True)
        result = result.stdout
        if result == answer:
            print(f"Case {idx} SUCCEED")
        else:
            print(f"Case {idx} FAILED - Result answer: {result[:-1]}, Expected anser: {answer[:-1]}")
            print(f"    - Input data:\n    - {data}")
        answers.append(answer)
        results.append(result)
        idx += 1
    assert results == answers

# test_isLegalLayout()
